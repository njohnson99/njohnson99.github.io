// @flekschas/utils v0.29.0 Copyright 2021 Fritz Lekschas
/**
 * Restrict value to be within [min, max]
 * @description About 18% faster than `Math.max(min, Math.min(max, value))`
 * @param {Number} value - Value to be clamped
 * @param {Number} min - Min value
 * @param {Number} max - Max value
 * @return {Number} Clamped value
 */

/**
 * Identity function
 * @param   {*}  x  Any kind of value
 * @return  {*}  `x`
 */
const identity = (x) => x;

/**
 * Transpose a nested 2D array
 * @param {array} matrix - The matrix-liked 2D nested array to be transposed
 * @return {array} The transposed 2D nested matrix-like array
 */
const array2dTranspose = (matrix) => {
  // Create a nested 2D array with transposed shape
  const out = [...new Array(matrix[0].length).fill().map(() => [])];

  // Fill the transposed array
  for (let i = 0; i < matrix.length; i++) {
    for (let j = 0; j < matrix[i].length; j++) {
      out[j][i] = matrix[i][j];
    }
  }

  return out;
};

/**
 * Clear an array without while keeping it's reference
 * @param {array} a - Array to be cleared
 * @return {array} The array itself
 */
const clearArray = (a) => {
  a.splice(0, a.length);
  return a;
};

/**
 * Return unique values of an array
 * @param {array} a - Input array
 * @return {array} Array with unique values
 */
const unique = (a, getter = identity) => {
  const s = new Set();
  const out = [];

  for (let i = 0; i < a.length; i++) {
    const v = getter(a[i]);
    if (!s.has(v)) {
      s.add(v);
      out.push(v);
    }
  }

  return out;
};

export { array2dTranspose, clearArray, unique };
