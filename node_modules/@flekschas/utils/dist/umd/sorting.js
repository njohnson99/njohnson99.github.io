// @flekschas/utils v0.29.0 Copyright 2021 Fritz Lekschas
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray')) :
  typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.utils = global.utils || {}, global._slicedToArray));
}(this, (function (exports, _slicedToArray) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

  /**
   * Restrict value to be within [min, max]
   * @description About 18% faster than `Math.max(min, Math.min(max, value))`
   * @param {Number} value - Value to be clamped
   * @param {Number} min - Min value
   * @param {Number} max - Max value
   * @return {Number} Clamped value
   */
  /**
   * Identity function
   * @param   {*}  x  Any kind of value
   * @return  {*}  `x`
   */

  var identity = function identity(x) {
    return x;
  };

  var sortAsc = function sortAsc(a, b) {
    return a - b;
  };
  var sortDesc = function sortDesc(a, b) {
    return b - a;
  };
  /**
   * Return a list of indices sorted by the array
   *
   * @example
   * const X = [9, 5, 11, -1, 0];
   * const sortedIdx = argSort(X);
   * // >> [3, 4, 1, 0, 2]
   * // I.e., the smallest element is X[sortedIdx[0]] == -1
   *
   * @param {array} array - Array of numerical values
   * @param {function} comparator - Pairwise value comparator function
   * @return {array} Array of indices sorted by the values
   */

  var argSort = function argSort(array) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$getter = _ref.getter,
        getter = _ref$getter === void 0 ? identity : _ref$getter,
        _ref$comparator = _ref.comparator,
        comparator = _ref$comparator === void 0 ? sortAsc : _ref$comparator,
        _ref$ignoreNull = _ref.ignoreNull,
        ignoreNull = _ref$ignoreNull === void 0 ? false : _ref$ignoreNull;

    return array.map(ignoreNull ? function (x, i) {
      return getter(x) === null ? undefined : [getter(x), i];
    } : function (x, i) {
      return [getter(x), i];
    }).sort(function (a, b) {
      return comparator(a[0], b[0]);
    }).reduce(function (out, tuple) {
      if (!tuple) return out;
      out.push(tuple[1]);
      return out;
    }, []);
  };
  /**
   * Return the sort position of each element in an array or object
   *
   * @example
   * let array = [9, 5, 11, -1, 0];
   * let pos = sortPos(array)
   * // >> [3, 2, 4, 0, 1]
   * // I.e., the first element of `array` is at position pos[0] == 3
   *
   * let object = { 1: 9, 2: 5, 11: 11, 100: -1, 999: 0 };
   * let pos = sortPos(object)
   * // >> { 1: 3, 2: 2, 11: 4, 100: 0, 999: 1 }
   * // I.e., element `999` of `object` is at position pos[999] == 1
   *
   * @param {array} array - Array of numerical values
   * @param {function} comparator - Pairwise value comparator function
   * @return {array} Array of the sorted value positions
   */

  var sortPos = function sortPos(source) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$getter = _ref2.getter,
        getter = _ref2$getter === void 0 ? identity : _ref2$getter,
        _ref2$comparator = _ref2.comparator,
        comparator = _ref2$comparator === void 0 ? sortAsc : _ref2$comparator,
        _ref2$ignoreNull = _ref2.ignoreNull,
        ignoreNull = _ref2$ignoreNull === void 0 ? false : _ref2$ignoreNull;

    return Object.entries(source).map(ignoreNull ? function (_ref3) {
      var _ref4 = _slicedToArray__default['default'](_ref3, 2),
          id = _ref4[0],
          x = _ref4[1];

      return getter(x) === null ? undefined : [id, getter(x)];
    } : function (_ref5) {
      var _ref6 = _slicedToArray__default['default'](_ref5, 2),
          id = _ref6[0],
          x = _ref6[1];

      return [id, getter(x)];
    }).sort(function (a, b) {
      return comparator(a[1], b[1]);
    }).reduce(function (out, tuple, i) {
      if (!tuple) return out;
      out[tuple[0]] = i;
      return out;
    }, new source.constructor());
  };

  exports.argSort = argSort;
  exports.sortAsc = sortAsc;
  exports.sortDesc = sortDesc;
  exports.sortPos = sortPos;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
