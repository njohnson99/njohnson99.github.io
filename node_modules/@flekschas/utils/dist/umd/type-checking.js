// @flekschas/utils v0.29.0 Copyright 2021 Fritz Lekschas
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.utils = global.utils || {}));
}(this, (function (exports) { 'use strict';

  /**
   * Test if a variable is an array
   * @param {*} f - The variable to test
   * @return {boolean} If `true` the variable is an array.
   */
  var isArray = Array.isArray;
  /**
   * Test if a variable is a function
   * @param {*} f - The variable to test
   * @return {boolean} If `true` the variable is a function.
   */

  var isFunction = function isFunction(f) {
    return !!(f && f.constructor && f.call && f.apply);
  };
  /**
   * Tests if a string is a valid HEX color encoding
   * @param {string} hex - HEX-encoded color string.
   * @return {boolean} If `true` the string is a valid HEX color encoding.
   */

  var isHex = function isHex(hex) {
    return /(^#[0-9A-Fa-f]{6}$)|(^#[0-9A-Fa-f]{3}$)/i.test(hex);
  };
  /**
   * Tests if a number is in `[0,1]`.
   * @param {number} x - Number to be tested.
   * @return {boolean} If `true` the number is in `[0,1]`.
   */

  var isNormFloat = function isNormFloat(x) {
    return isNumber(x) && x >= 0 && x <= 1;
  };
  /**
   * Tests if an array consist of normalized numbers that are in `[0,1]` only.
   * @param {array} a - Array to be tested
   * @return {boolean} If `true` the array contains only numbers in `[0,1]`.
   */

  var isNormFloatArray = function isNormFloatArray(a) {
    return Array.isArray(a) && a.every(isNormFloat);
  };
  /**
   * Test if a variable is a number
   * @param {*} x - Variable to be tested
   * @return {boolean} If `true`, `x` is a number.
   */

  var isNumber = function isNumber(x) {
    return typeof x === 'number';
  };
  /**
   * Test if a variable is a plain object, e.g., `{}`
   * @param {*} o - The variable to test
   * @return {boolean} If `true` the variable is a plain object.
   */

  var isObject = function isObject(o) {
    return !!o && o.constructor === Object;
  };
  /**
   * Tests if an array is encoding an RGB color.
   * @param {array} rgb - Array to be tested
   * @return {boolean} If `true` the array hold a triple of Uint8 numbers or
   *   a triple of normalized floats.
   */

  var isRgbArray = function isRgbArray(rgb) {
    return rgb.length === 3 && (isNormFloatArray(rgb) || isUint8Array(rgb));
  };
  /**
   * Tests if an array is encoding an RGBA color.
   * @param   {array}  rgb  Array to be tested
   * @return  {boolean}  If `true` the array hold a quadruple of normalized floats,
   *   a quadruple of Uint8s, or a triple of Uint8 and one normalized float.
   */

  var isRgbaArray = function isRgbaArray(rgba) {
    return rgba.length === 4 && (isNormFloatArray(rgba) || isUint8Array(rgba) || isUint8Array(rgba.slice(0, 3)) && isNormFloat(rgba[3]));
  };
  /**
   * Tests if a string is encoding an RGB color.
   * @param {string} rgb - String to be tested
   * @return {boolean} If `true` the array hold a triple of Uint8 numbers or
   *   a triple of normalized floats.
   */

  var isRgbStr = function isRgbStr(str) {
    return /rgb\(\s*[\d.]+\s*,\s*[\d.]+\s*,\s*[\d.]+\s*\)/i.test(str);
  };
  /**
   * Tests if a string is encoding an RGBA color.
   * @param {string} rgb - String to be tested
   * @return {boolean} If `true` the array hold a quadruple of Uint8 numbers or
   *   a quadruple of normalized floats.
   */

  var isRgbaStr = function isRgbaStr(str) {
    return /rgba\(\s*[\d.]+\s*,\s*[\d.]+\s*,\s*[\d.]+\s*,\s*[\d.]+\s*\)/i.test(str);
  };
  /**
   * Tests if a variable is a string
   * @param {*} s - Variable to be tested
   * @return {boolean} If `true` variable is a string
   */

  var isString = function isString(s) {
    return typeof s === 'string' || s instanceof String;
  };
  /**
   * Tests if a number is an interger and in `[0,255]`.
   * @param {number} x - Number to be tested.
   * @return {boolean} If `true` the number is an interger and in `[0,255]`.
   */

  var isUint8 = function isUint8(x) {
    return Number.isInteger(x) && x >= 0 && x <= 255;
  };
  /**
   * Tests if an array consist of Uint8 numbers only.
   * @param {array} a - Array to be tested.
   * @return {boolean} If `true` the array contains only Uint8 numbers.
   */

  var isUint8Array = function isUint8Array(a) {
    return Array.isArray(a) && a.every(isUint8);
  };

  exports.isArray = isArray;
  exports.isFunction = isFunction;
  exports.isHex = isHex;
  exports.isNormFloat = isNormFloat;
  exports.isNormFloatArray = isNormFloatArray;
  exports.isNumber = isNumber;
  exports.isObject = isObject;
  exports.isRgbArray = isRgbArray;
  exports.isRgbStr = isRgbStr;
  exports.isRgbaArray = isRgbaArray;
  exports.isRgbaStr = isRgbaStr;
  exports.isString = isString;
  exports.isUint8 = isUint8;
  exports.isUint8Array = isUint8Array;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
