// @flekschas/utils v0.29.0 Copyright 2021 Fritz Lekschas
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.utils = global.utils || {}));
}(this, (function (exports) { 'use strict';

  var XMLNS = 'http://www.w3.org/2000/svg';
  /**
   * Method to add a class name to an HTML or SVG element.
   * @param {object} element - HTML or SVG element to add a class to.
   * @param {string} className - The class name to be added.
   */

  var addClass = function addClass(element, className) {
    if (element.namespaceURI === XMLNS) {
      if (!hasClass(element, className)) {
        var klass = element.getAttribute('class') || '';
        element.setAttribute('class', "".concat(klass, " ").concat(className));
      }
    } else if (element.classList) {
      element.classList.add(className);
    } else if (!hasClass(element, className)) {
      element.className += " ".concat(className);
    }
  };
  /**
   * Create HTML from a template string
   * @param {string} template - HTML template string
   * @return {node} Root DOM element
   */

  var createHtmlByTemplate = function createHtmlByTemplate(template) {
    var dummyEl = document.createElement('div');
    dummyEl.insertAdjacentHTML('beforeend', template);
    return dummyEl.firstChild;
  };
  /**
   * Check if an HTML or SVG element has a certain class
   * @param {object} element - HTML or SVG element to be checked
   * @param {string} className - Class name to be checked for
   * @return {boolean} If `true` `element` has the class name
   */

  var hasClass = function hasClass(element, className) {
    if (element.namespaceURI === XMLNS) {
      var klass = element.getAttribute('class');
      return klass && !!klass.match(new RegExp("(\\s|^)".concat(className, "(\\s|$)")));
    }

    if (element.classList) return element.classList.contains(className);
    return !!element.className.match(new RegExp("(\\s|^)".concat(className, "(\\s|$)")));
  };
  /**
   * Test whether a DOM element is the parent of another DOM element.
   *
   * @param {object} element - Potential child element.
   * @param {object} parent - Target parent element which is tested to have `el`
   *   as a child.
   * @return {boolean} If `true` `parent` is a parent of `element`.
   */

  var isParentOf = function isParentOf(element, parent) {
    var el = element;

    while (el && el !== parent && el.tagName !== 'HTML') {
      el = el.parentNode;
    }

    return el === parent;
  };
  /**
   * Remove all children of a DOM node
   * @param {object} node - DOM node whose children are to be removed
   */

  var removeAllChildren = function removeAllChildren(node) {
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
  };
  /**
   * Remove last child of a DOM node
   * @param {object} node - DOM node whose last child is to be removed
   */

  var removeLastChild = function removeLastChild(node) {
    node.removeChild(node.lastChild);
  };
  /**
   * Remove a class from an HTML or SVG element.
   * @param {object} element - HTML or SVG element.
   * @param {string} className - Class name to be removed.
   */

  var removeClass = function removeClass(element, className) {
    var reg = new RegExp("(\\s|^)".concat(className, "(\\s|$)"));

    if (element.namespaceURI === XMLNS) {
      var klass = element.getAttribute('class') || '';
      element.setAttribute('class', klass.replace(reg, ' '));
    } else if (element.classList) {
      element.classList.remove(className);
    } else if (hasClass(element, className)) {
      element.className = element.className.replace(reg, ' ');
    }
  };

  exports.addClass = addClass;
  exports.createHtmlByTemplate = createHtmlByTemplate;
  exports.hasClass = hasClass;
  exports.isParentOf = isParentOf;
  exports.removeAllChildren = removeAllChildren;
  exports.removeClass = removeClass;
  exports.removeLastChild = removeLastChild;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
