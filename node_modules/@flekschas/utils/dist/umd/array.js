// @flekschas/utils v0.29.0 Copyright 2021 Fritz Lekschas
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/toConsumableArray')) :
  typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/toConsumableArray'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.utils = global.utils || {}, global._toConsumableArray));
}(this, (function (exports, _toConsumableArray) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

  /**
   * Restrict value to be within [min, max]
   * @description About 18% faster than `Math.max(min, Math.min(max, value))`
   * @param {Number} value - Value to be clamped
   * @param {Number} min - Min value
   * @param {Number} max - Max value
   * @return {Number} Clamped value
   */
  /**
   * Identity function
   * @param   {*}  x  Any kind of value
   * @return  {*}  `x`
   */

  var identity = function identity(x) {
    return x;
  };

  /**
   * Transpose a nested 2D array
   * @param {array} matrix - The matrix-liked 2D nested array to be transposed
   * @return {array} The transposed 2D nested matrix-like array
   */

  var array2dTranspose = function array2dTranspose(matrix) {
    // Create a nested 2D array with transposed shape
    var out = _toConsumableArray__default['default'](new Array(matrix[0].length).fill().map(function () {
      return [];
    })); // Fill the transposed array


    for (var i = 0; i < matrix.length; i++) {
      for (var j = 0; j < matrix[i].length; j++) {
        out[j][i] = matrix[i][j];
      }
    }

    return out;
  };
  /**
   * Clear an array without while keeping it's reference
   * @param {array} a - Array to be cleared
   * @return {array} The array itself
   */

  var clearArray = function clearArray(a) {
    a.splice(0, a.length);
    return a;
  };
  /**
   * Return unique values of an array
   * @param {array} a - Input array
   * @return {array} Array with unique values
   */

  var unique = function unique(a) {
    var getter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
    var s = new Set();
    var out = [];

    for (var i = 0; i < a.length; i++) {
      var v = getter(a[i]);

      if (!s.has(v)) {
        s.add(v);
        out.push(v);
      }
    }

    return out;
  };

  exports.array2dTranspose = array2dTranspose;
  exports.clearArray = clearArray;
  exports.unique = unique;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
