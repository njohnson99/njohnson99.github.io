// @flekschas/utils v0.29.0 Copyright 2021 Fritz Lekschas
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.utils = global.utils || {}));
}(this, (function (exports) { 'use strict';

  /**
   * Restrict value to be within [min, max]
   * @description About 18% faster than `Math.max(min, Math.min(max, value))`
   * @param {Number} value - Value to be clamped
   * @param {Number} min - Min value
   * @param {Number} max - Max value
   * @return {Number} Clamped value
   */
  var clamp = function clamp(value, min, max) {
    return (// eslint-disable-next-line no-nested-ternary
      value < min ? min : value > max ? max : value
    );
  };
  /**
   * Identity function
   * @param   {*}  x  Any kind of value
   * @return  {*}  `x`
   */

  var identity = function identity(x) {
    return x;
  };
  /**
   * Test if two floats are close given some precision
   * @param {number} a - First float
   * @param {number} b - Second float
   * @param {number} precision - Number of decimal places to check
   * @return {boolean} If `true` the difference between the floats is less than
   *   10^-precision
   */

  var isClose = function isClose(a, b) {
    var precision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;
    return Math.abs(a - b) < Math.pow(10, -precision);
  };

  exports.clamp = clamp;
  exports.identity = identity;
  exports.isClose = isClose;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
