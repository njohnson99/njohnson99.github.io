// @flekschas/utils v0.29.0 Copyright 2021 Fritz Lekschas
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.utils = global.utils || {}));
}(this, (function (exports) { 'use strict';

  /**
   * Clone an event by invoking the source event's constructor and passing in
   *   the source event.
   *
   * @param {object} event - Source event to be cloned.
   * @return {object} Cloned event
   */
  var cloneEvent = function cloneEvent(event) {
    var newEvent = new event.constructor(event.type, event);
    newEvent.sourceUid = event.sourceUid;
    newEvent.forwarded = event.forwarded;
    return newEvent;
  };
  /**
   * Forward an event by cloning and dispatching it.
   * @param {object} event - Event to be forwarded.
   * @param {object} target - Target HTML element for the event.
   */

  var forwardEvent = function forwardEvent(event, target) {
    target.dispatchEvent(cloneEvent(event));
  };

  exports.cloneEvent = cloneEvent;
  exports.forwardEvent = forwardEvent;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
