// @flekschas/utils v0.29.0 Copyright 2021 Fritz Lekschas
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.utils = global.utils || {}));
}(this, (function (exports) { 'use strict';

  /* eslint no-param-reassign:0 */

  /**
   * Cubic in easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */
  var cubicIn = function cubicIn(t) {
    return t * t * t;
  };
  /**
   * Cubic in and out easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var cubicInOut = function cubicInOut(t) {
    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
  };
  /**
   * Cubic out easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var cubicOut = function cubicOut(t) {
    return --t * t * t + 1;
  };
  /**
   * Linearly interpolate two numbers
   * @param {number} a - The start value
   * @param {number} b - The end value
   * @param {number} p - The interpolation progress. Must be in [0, 1] where `0`
   *   refers to the start value and `1` to the end value
   * @return {number} The interpolated number
   */

  var interpolateNumber = function interpolateNumber(a, b, p) {
    // eslint-disable-next-line no-param-reassign
    p = Math.min(1, Math.max(0, p));
    return a * (1 - p) + b * p;
  };
  /**
   * Lineraly interpolate a numerical vector
   * @param {array} a - The start vector
   * @param {array} b - The end vector
   * @param {number} p - The interpolation progress. Must be in [0, 1] where `0`
   *   refers to the start vector and `1` to the end vector
   * @return {array} The interpolated vector
   */

  var interpolateVector = function interpolateVector(a, b, p) {
    return a.map(function (x, i) {
      return interpolateNumber(x, b[i], p);
    });
  };
  /**
   * Linear easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} Same as the input
   */

  var linear = function linear(t) {
    return t;
  };
  /**
   * Quadratic in easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var quadIn = function quadIn(t) {
    return t * t;
  };
  /**
   * Quadratic in and out easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var quadInOut = function quadInOut(t) {
    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
  };
  /**
   * Quadratic out easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var quadOut = function quadOut(t) {
    return t * (2 - t);
  };
  /**
   * Quartic in easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var quartIn = function quartIn(t) {
    return t * t * t * t;
  };
  /**
   * Quartic in and out easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var quartOut = function quartOut(t) {
    return 1 - --t * t * t * t;
  };
  /**
   * Quartic out easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var quartInOut = function quartInOut(t) {
    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
  };
  /**
   * Quintic in easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var quintIn = function quintIn(t) {
    return t * t * t * t * t;
  };
  /**
   * Quintic in and out easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var quintOut = function quintOut(t) {
    return 1 + --t * t * t * t * t;
  };
  /**
   * Quintic out easing function
   * @param {number} t - The input time to be eased. Must be in [0, 1] where `0`
   *   refers to the start and `1` to the end
   * @return {number} The eased time
   */

  var quintInOut = function quintInOut(t) {
    return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
  };

  exports.cubicIn = cubicIn;
  exports.cubicInOut = cubicInOut;
  exports.cubicOut = cubicOut;
  exports.interpolateNumber = interpolateNumber;
  exports.interpolateVector = interpolateVector;
  exports.linear = linear;
  exports.quadIn = quadIn;
  exports.quadInOut = quadInOut;
  exports.quadOut = quadOut;
  exports.quartIn = quartIn;
  exports.quartInOut = quartInOut;
  exports.quartOut = quartOut;
  exports.quintIn = quintIn;
  exports.quintInOut = quintInOut;
  exports.quintOut = quintOut;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
