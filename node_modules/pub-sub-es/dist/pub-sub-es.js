(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.createPubSub = {}));
}(this, (function (exports) { 'use strict';

  /**
   * A new or fake broadcast channel.
   * @type {BroadcastChannel|object}
   */
  var bc = (function () {
    try {
      return new window.BroadcastChannel('pub-sub-es');
    } catch (e) {
      return { postMessage: function () {} };
    }
  })();

  /**
   * Get final event name
   * @param {string} eventName - Event name to be adjusted
   * @param {boolean} caseInsensitive - If `true`, `eventName` will be lowercased
   */
  var getEventName = function (eventName, caseInsensitive) { return caseInsensitive ? eventName.toLowerCase() : eventName; };

  /**
   * Setup subscriber.
   * @param {object} stack - The bound event stack.
   * @return {function} - Curried function for subscribing to an event on a
   *   specific event stack.
   */
  var subscribe = function (stack, ref) {
      if ( ref === void 0 ) ref = {};
      var caseInsensitive = ref.caseInsensitive;

      return function (event, handler, times) {
      if ( times === void 0 ) times = Infinity;

      var e = getEventName(event, caseInsensitive);

      if (!stack[e]) {
        stack[e] = [];
        stack.__times__[e] = [];
      }

      stack[e].push(handler);
      stack.__times__[e].push(+times || Infinity);

      return { event: e, handler: handler };
    };
  };

  /**
   * Setup unsubscriber.
   * @param {object} stack - The bound event stack.
   * @return {function} - Curried function for unsubscribing an event from a
   *   specific event stack.
   */
  var unsubscribe = function (stack, ref) {
      if ( ref === void 0 ) ref = {};
      var caseInsensitive = ref.caseInsensitive;

      return function (event, handler) {
      if (typeof event === 'object') {
        handler = event.handler; // eslint-disable-line no-param-reassign
        event = event.event; // eslint-disable-line no-param-reassign
      }

      var e = getEventName(event, caseInsensitive);

      if (!stack[e]) { return; }

      var id = stack[e].indexOf(handler);

      if (id === -1 || id >= stack[e].length) { return; }

      stack[e].splice(id, 1);
      stack.__times__[e].splice(id, 1);
    };
  };

  /**
   * Inform listeners about some news
   * @param {array} listeners - List of listeners
   * @param {*} news - News object
   */
  var inform = function (listeners, news) { return function () {
    listeners.forEach(function (listener) { return listener(news); });
  }; };

  /**
   * Setup the publisher.
   * @param  {object} stack - The bound event stack.
   * @param  {boolean} isGlobal - If `true` event will be published globally.
   * @return {function} - Curried function for publishing an event on a specific
   *   event stack.
   */
  var publish = function (stack, ref) {
    if ( ref === void 0 ) ref = {};
    var isGlobal = ref.isGlobal;
    var caseInsensitive = ref.caseInsensitive;
    var async = ref.async;

    var unsubscriber = unsubscribe(stack);

    /**
     * Public interface for publishing an event.
     * @curried
     * @param {string} event - Event type to be published.
     * @param {any} news - The news to be published.
     * @param {object} options - Option object with
     *   - {boolean} isNoGlobalBroadcast - If `true` event will *not* be
     *     broadcasted gloablly even if `isGlobal` is `true`.
     *   - {boolean} async - If `true` event will *not* be broadcasted
     *     synchronously even if `async` is `false` globally.
     */
    return function (event, news, options) {
      if ( options === void 0 ) options = {};

      var e = getEventName(event, caseInsensitive);

      if (!stack[e]) { return; }

      var listeners = [].concat( stack[e] );

      listeners.forEach(function (listener, i) {
        if (--stack.__times__[e][i] < 1) { unsubscriber(e, listener); }
      });

      if (async || options.async) {
        setTimeout(inform(listeners, news), 0);
      } else {
        inform(listeners, news)();
      }

      if (isGlobal && !options.isNoGlobalBroadcast) {
        try {
          bc.postMessage({ event: e, news: news });
        } catch (error) {
          if (error instanceof DOMException) {
            console.warn(
              ("Could not broadcast '" + e + "' globally. Payload is not clonable.")
            );
          } else {
            throw error;
          }
        }
      }
    };
  };

  /**
   * Setup event clearer
   * @param {object} stack - The bound event stack.
   * @return {function} - A curried function removing all event listeners on a
   *   specific event stack.
   */
  var clear = function (stack) { return function () {
      Object.keys(stack)
        .filter(function (eventName) { return eventName[0] !== '_'; })
        .forEach(function (eventName) {
          stack[eventName] = undefined;
          stack.__times__[eventName] = undefined;
          delete stack[eventName];
          delete stack.__times__[eventName];
        });
    }; };

  /**
   * Create a new empty stack object
   * @return {object} - An empty stack object.
   */
  var createEmptyStack = function () { return ({ __times__: {} }); };

  /**
   * Create a new pub-sub instance
   * @param {object} stack - Object to be used as the event stack.
   * @return {object} - A new pub-sub instance.
   */
  var createPubSub = function (ref) {
    if ( ref === void 0 ) ref = {};
    var async = ref.async; if ( async === void 0 ) async = false;
    var caseInsensitive = ref.caseInsensitive; if ( caseInsensitive === void 0 ) caseInsensitive = false;
    var stack = ref.stack; if ( stack === void 0 ) stack = createEmptyStack();

    if (!stack.__times__) { stack.__times__ = {}; }

    return {
      publish: publish(stack, { async: async, caseInsensitive: caseInsensitive }),
      subscribe: subscribe(stack, { caseInsensitive: caseInsensitive }),
      unsubscribe: unsubscribe(stack, { caseInsensitive: caseInsensitive }),
      clear: clear(stack),
      stack: stack,
    };
  };

  /**
   * Global pub-sub stack object
   * @type {object}
   */
  var globalPubSubStack = createEmptyStack();
  /**
   * Global pub-sub stack instance
   * @type {object}
   */
  var globalPubSub = {
    publish: publish(globalPubSubStack, { isGlobal: true }),
    subscribe: subscribe(globalPubSubStack),
    unsubscribe: unsubscribe(globalPubSubStack),
    stack: globalPubSubStack,
  };
  bc.onmessage = function (ref) {
      var ref_data = ref.data;
      var event = ref_data.event;
      var news = ref_data.news;

      return globalPubSub.publish(event, news, true);
  };

  exports.createPubSub = createPubSub;
  exports.default = createPubSub;
  exports.globalPubSub = globalPubSub;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
